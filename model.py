import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import f1_score, accuracy_score, confusion_matrix, classification_report
import pickle as pkl


def rfc_model():
    # >>> Import dataset to dataframe <<<
    df = pd.read_csv('main_dataset.csv')

    # >>> Data Cleaning <<<
    y = df['Malware']
    df = df.drop(['Name', 'Malware'], axis=1)  # --> Information not needed for trained model.

    # >>> Data splitting <<<
    X_train, X_test, y_train, y_test = train_test_split(df, y, test_size=0.2, random_state=0)
    print(X_train.shape)

    # >>> Model Building - Random Forest Classifier <<<
    random_forest = RandomForestClassifier(n_estimators=100, max_depth=9, random_state=0)
    random_forest.fit(X_train, y_train)

    # >>> Accuracy Evaluation <<<
    train_prediction = random_forest.predict(X_train)
    print(f'training data accuracy = {accuracy_score(y_train, train_prediction)}')  # Train dataset predictions

    test_prediction = random_forest.predict(X_test)
    print(f'test data accuracy = {accuracy_score(y_test, test_prediction)}')  # Test dataset predictions

    print(f'the f1 score is: {f1_score(y_test, test_prediction)}')

    # >>> Confusion Matrix <<<
    cm_plot = sns.heatmap(confusion_matrix(test_prediction, y_test), annot=True, fmt="d",
                          cmap=plt.cm.Blues, cbar=False)

    cm_plot.set_xlabel("Predicted")
    cm_plot.set_ylabel("True")

    cm_plot.plot()

    # >>> Importance of features within dataset <<<
    order_of_importance = random_forest.feature_importances_
    importance = {df.columns.values[i]: order_of_importance[i]
                  for i in range(len(order_of_importance))}

    sort = {j: k for j, k in sorted(importance.items(), key=lambda
        item: item[1])}

    plt.figure(figsize=(10, 15))
    fi_plot = sns.barplot(y=list(sort.keys())[::-1], x=list(sort.values())[::-1],
                          palette='magma')

    plt.title('File features - Order of Importance')
    fi_plot.plot()

    plt.show()

    # >>> Classification report <<<
    print(classification_report(y_test, test_prediction, target_names=['Benign Files', 'Malware Files']))

    # >>> Saving Model <<<
    filename = "model.pkl"
    with open(filename, 'wb') as file:
        pkl.dump(random_forest, file)


rfc_model()
